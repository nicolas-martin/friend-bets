// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file bets/v1/market.proto (package bets.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ClaimRequest, ClaimResponse, CreateMarketRequest, CreateMarketResponse, GetMarketRequest, GetMarketResponse, GetPositionRequest, GetPositionResponse, GetUserPositionsRequest, GetUserPositionsResponse, ListMarketsRequest, ListMarketsResponse, PlaceBetRequest, PlaceBetResponse, ResolveRequest, ResolveResponse, WatchEventsRequest, WatchEventsResponse } from "./market_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * BetsService provides betting market functionality
 *
 * @generated from service bets.v1.BetsService
 */
export const BetsService = {
  typeName: "bets.v1.BetsService",
  methods: {
    /**
     * List available markets
     *
     * @generated from rpc bets.v1.BetsService.ListMarkets
     */
    listMarkets: {
      name: "ListMarkets",
      I: ListMarketsRequest,
      O: ListMarketsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get a single market by ID
     *
     * @generated from rpc bets.v1.BetsService.GetMarket
     */
    getMarket: {
      name: "GetMarket",
      I: GetMarketRequest,
      O: GetMarketResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create a new market
     *
     * @generated from rpc bets.v1.BetsService.CreateMarket
     */
    createMarket: {
      name: "CreateMarket",
      I: CreateMarketRequest,
      O: CreateMarketResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Place a bet on a market
     *
     * @generated from rpc bets.v1.BetsService.PlaceBet
     */
    placeBet: {
      name: "PlaceBet",
      I: PlaceBetRequest,
      O: PlaceBetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Resolve a market outcome
     *
     * @generated from rpc bets.v1.BetsService.Resolve
     */
    resolve: {
      name: "Resolve",
      I: ResolveRequest,
      O: ResolveResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Claim winnings from a resolved market
     *
     * @generated from rpc bets.v1.BetsService.Claim
     */
    claim: {
      name: "Claim",
      I: ClaimRequest,
      O: ClaimResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get a user's position in a specific market
     *
     * @generated from rpc bets.v1.BetsService.GetPosition
     */
    getPosition: {
      name: "GetPosition",
      I: GetPositionRequest,
      O: GetPositionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get all positions for a user
     *
     * @generated from rpc bets.v1.BetsService.GetUserPositions
     */
    getUserPositions: {
      name: "GetUserPositions",
      I: GetUserPositionsRequest,
      O: GetUserPositionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Watch market events (server streaming)
     *
     * @generated from rpc bets.v1.BetsService.WatchEvents
     */
    watchEvents: {
      name: "WatchEvents",
      I: WatchEventsRequest,
      O: WatchEventsResponse,
      kind: MethodKind.ServerStreaming,
    },
  }
} as const;

