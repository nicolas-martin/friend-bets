// @generated by protoc-gen-es v2.7.0 with parameter "target=ts"
// @generated from file bets/v1/market.proto (package bets.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { MarketStatus, Side } from "./common_pb";
import { file_bets_v1_common } from "./common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file bets/v1/market.proto.
 */
export const file_bets_v1_market: GenFile = /*@__PURE__*/
  fileDesc("ChRiZXRzL3YxL21hcmtldC5wcm90bxIHYmV0cy52MSKtAgoGTWFya2V0EgoKAmlkGAEgASgJEg8KB2NyZWF0b3IYAiABKAkSDAoEbWludBgDIAEoCRINCgV2YXVsdBgEIAEoCRIPCgdmZWVfYnBzGAUgASgNEg4KBmVuZF90cxgGIAEoAxIbChNyZXNvbHZlX2RlYWRsaW5lX3RzGAcgASgDEhAKCHN0YWtlZF9hGAggASgEEhAKCHN0YWtlZF9iGAkgASgEEiUKBnN0YXR1cxgKIAEoDjIVLmJldHMudjEuTWFya2V0U3RhdHVzEh4KB291dGNvbWUYCyABKA4yDS5iZXRzLnYxLlNpZGUSHQoVY3JlYXRvcl9mZWVfd2l0aGRyYXduGAwgASgIEg0KBXRpdGxlGA0gASgJEhIKCmNyZWF0ZWRfYXQYDiABKAMiigEKCFBvc2l0aW9uEgoKAmlkGAEgASgJEhEKCW1hcmtldF9pZBgCIAEoCRINCgVvd25lchgDIAEoCRIbCgRzaWRlGAQgASgOMg0uYmV0cy52MS5TaWRlEg4KBmFtb3VudBgFIAEoBBIPCgdjbGFpbWVkGAYgASgIEhIKCmNyZWF0ZWRfYXQYByABKAMifwoSTGlzdE1hcmtldHNSZXF1ZXN0EhQKDHRpdGxlX2ZpbHRlchgBIAEoCRIsCg1zdGF0dXNfZmlsdGVyGAIgASgOMhUuYmV0cy52MS5NYXJrZXRTdGF0dXMSEQoJcGFnZV9zaXplGAMgASgNEhIKCnBhZ2VfdG9rZW4YBCABKAkiUAoTTGlzdE1hcmtldHNSZXNwb25zZRIgCgdtYXJrZXRzGAEgAygLMg8uYmV0cy52MS5NYXJrZXQSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIoEBChNDcmVhdGVNYXJrZXRSZXF1ZXN0Eg8KB2ZlZV9icHMYASABKA0SDgoGZW5kX3RzGAIgASgDEhsKE3Jlc29sdmVfZGVhZGxpbmVfdHMYAyABKAMSDQoFdGl0bGUYBCABKAkSDwoHY3JlYXRvchgFIAEoCRIMCgRtaW50GAYgASgJIlgKFENyZWF0ZU1hcmtldFJlc3BvbnNlEhEKCW1hcmtldF9pZBgBIAEoCRIaChJ1bnNpZ25lZF90eF9iYXNlNjQYAiABKAkSEQoJc2lnbmF0dXJlGAMgASgJImAKD1BsYWNlQmV0UmVxdWVzdBIRCgltYXJrZXRfaWQYASABKAkSDQoFb3duZXIYAiABKAkSGwoEc2lkZRgDIAEoDjINLmJldHMudjEuU2lkZRIOCgZhbW91bnQYBCABKAQiVgoQUGxhY2VCZXRSZXNwb25zZRITCgtwb3NpdGlvbl9pZBgBIAEoCRIaChJ1bnNpZ25lZF90eF9iYXNlNjQYAiABKAkSEQoJc2lnbmF0dXJlGAMgASgJIlUKDlJlc29sdmVSZXF1ZXN0EhEKCW1hcmtldF9pZBgBIAEoCRIQCghyZXNvbHZlchgCIAEoCRIeCgdvdXRjb21lGAMgASgOMg0uYmV0cy52MS5TaWRlIkAKD1Jlc29sdmVSZXNwb25zZRIaChJ1bnNpZ25lZF90eF9iYXNlNjQYASABKAkSEQoJc2lnbmF0dXJlGAIgASgJIjAKDENsYWltUmVxdWVzdBIRCgltYXJrZXRfaWQYASABKAkSDQoFb3duZXIYAiABKAkiVQoNQ2xhaW1SZXNwb25zZRIVCg1wYXlvdXRfYW1vdW50GAEgASgEEhoKEnVuc2lnbmVkX3R4X2Jhc2U2NBgCIAEoCRIRCglzaWduYXR1cmUYAyABKAkiKAoSV2F0Y2hFdmVudHNSZXF1ZXN0EhIKCm1hcmtldF9pZHMYASADKAkidwoLTWFya2V0RXZlbnQSCgoCaWQYASABKAkSEQoJbWFya2V0X2lkGAIgASgJEhIKCmV2ZW50X3R5cGUYAyABKAkSDAoEZGF0YRgEIAEoCRIRCgl0aW1lc3RhbXAYBSABKAMSFAoMdHhfc2lnbmF0dXJlGAYgASgJIjoKE1dhdGNoRXZlbnRzUmVzcG9uc2USIwoFZXZlbnQYASABKAsyFC5iZXRzLnYxLk1hcmtldEV2ZW50IiUKEEdldE1hcmtldFJlcXVlc3QSEQoJbWFya2V0X2lkGAEgASgJIjQKEUdldE1hcmtldFJlc3BvbnNlEh8KBm1hcmtldBgBIAEoCzIPLmJldHMudjEuTWFya2V0IjYKEkdldFBvc2l0aW9uUmVxdWVzdBIRCgltYXJrZXRfaWQYASABKAkSDQoFb3duZXIYAiABKAkiOgoTR2V0UG9zaXRpb25SZXNwb25zZRIjCghwb3NpdGlvbhgBIAEoCzIRLmJldHMudjEuUG9zaXRpb24iTwoXR2V0VXNlclBvc2l0aW9uc1JlcXVlc3QSDQoFb3duZXIYASABKAkSEQoJcGFnZV9zaXplGAIgASgNEhIKCnBhZ2VfdG9rZW4YAyABKAkiWQoYR2V0VXNlclBvc2l0aW9uc1Jlc3BvbnNlEiQKCXBvc2l0aW9ucxgBIAMoCzIRLmJldHMudjEuUG9zaXRpb24SFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJMqAFCgtCZXRzU2VydmljZRJKCgtMaXN0TWFya2V0cxIbLmJldHMudjEuTGlzdE1hcmtldHNSZXF1ZXN0GhwuYmV0cy52MS5MaXN0TWFya2V0c1Jlc3BvbnNlIgASRAoJR2V0TWFya2V0EhkuYmV0cy52MS5HZXRNYXJrZXRSZXF1ZXN0GhouYmV0cy52MS5HZXRNYXJrZXRSZXNwb25zZSIAEk0KDENyZWF0ZU1hcmtldBIcLmJldHMudjEuQ3JlYXRlTWFya2V0UmVxdWVzdBodLmJldHMudjEuQ3JlYXRlTWFya2V0UmVzcG9uc2UiABJBCghQbGFjZUJldBIYLmJldHMudjEuUGxhY2VCZXRSZXF1ZXN0GhkuYmV0cy52MS5QbGFjZUJldFJlc3BvbnNlIgASPgoHUmVzb2x2ZRIXLmJldHMudjEuUmVzb2x2ZVJlcXVlc3QaGC5iZXRzLnYxLlJlc29sdmVSZXNwb25zZSIAEjgKBUNsYWltEhUuYmV0cy52MS5DbGFpbVJlcXVlc3QaFi5iZXRzLnYxLkNsYWltUmVzcG9uc2UiABJKCgtHZXRQb3NpdGlvbhIbLmJldHMudjEuR2V0UG9zaXRpb25SZXF1ZXN0GhwuYmV0cy52MS5HZXRQb3NpdGlvblJlc3BvbnNlIgASWQoQR2V0VXNlclBvc2l0aW9ucxIgLmJldHMudjEuR2V0VXNlclBvc2l0aW9uc1JlcXVlc3QaIS5iZXRzLnYxLkdldFVzZXJQb3NpdGlvbnNSZXNwb25zZSIAEkwKC1dhdGNoRXZlbnRzEhsuYmV0cy52MS5XYXRjaEV2ZW50c1JlcXVlc3QaHC5iZXRzLnYxLldhdGNoRXZlbnRzUmVzcG9uc2UiADABQjlaN2dpdGh1Yi5jb20vZnJpZW5kLWJldHMvYmFja2VuZC9nZW4vcHJvdG8vYmV0cy92MTtiZXRzdjFiBnByb3RvMw", [file_bets_v1_common]);

/**
 * Market represents a betting market
 *
 * @generated from message bets.v1.Market
 */
export type Market = Message<"bets.v1.Market"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string creator = 2;
   */
  creator: string;

  /**
   * @generated from field: string mint = 3;
   */
  mint: string;

  /**
   * @generated from field: string vault = 4;
   */
  vault: string;

  /**
   * @generated from field: uint32 fee_bps = 5;
   */
  feeBps: number;

  /**
   * @generated from field: int64 end_ts = 6;
   */
  endTs: bigint;

  /**
   * @generated from field: int64 resolve_deadline_ts = 7;
   */
  resolveDeadlineTs: bigint;

  /**
   * @generated from field: uint64 staked_a = 8;
   */
  stakedA: bigint;

  /**
   * @generated from field: uint64 staked_b = 9;
   */
  stakedB: bigint;

  /**
   * @generated from field: bets.v1.MarketStatus status = 10;
   */
  status: MarketStatus;

  /**
   * @generated from field: bets.v1.Side outcome = 11;
   */
  outcome: Side;

  /**
   * @generated from field: bool creator_fee_withdrawn = 12;
   */
  creatorFeeWithdrawn: boolean;

  /**
   * @generated from field: string title = 13;
   */
  title: string;

  /**
   * @generated from field: int64 created_at = 14;
   */
  createdAt: bigint;
};

/**
 * Describes the message bets.v1.Market.
 * Use `create(MarketSchema)` to create a new message.
 */
export const MarketSchema: GenMessage<Market> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 0);

/**
 * Position represents a user's bet position
 *
 * @generated from message bets.v1.Position
 */
export type Position = Message<"bets.v1.Position"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string market_id = 2;
   */
  marketId: string;

  /**
   * @generated from field: string owner = 3;
   */
  owner: string;

  /**
   * @generated from field: bets.v1.Side side = 4;
   */
  side: Side;

  /**
   * @generated from field: uint64 amount = 5;
   */
  amount: bigint;

  /**
   * @generated from field: bool claimed = 6;
   */
  claimed: boolean;

  /**
   * @generated from field: int64 created_at = 7;
   */
  createdAt: bigint;
};

/**
 * Describes the message bets.v1.Position.
 * Use `create(PositionSchema)` to create a new message.
 */
export const PositionSchema: GenMessage<Position> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 1);

/**
 * List markets request
 *
 * @generated from message bets.v1.ListMarketsRequest
 */
export type ListMarketsRequest = Message<"bets.v1.ListMarketsRequest"> & {
  /**
   * @generated from field: string title_filter = 1;
   */
  titleFilter: string;

  /**
   * @generated from field: bets.v1.MarketStatus status_filter = 2;
   */
  statusFilter: MarketStatus;

  /**
   * @generated from field: uint32 page_size = 3;
   */
  pageSize: number;

  /**
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message bets.v1.ListMarketsRequest.
 * Use `create(ListMarketsRequestSchema)` to create a new message.
 */
export const ListMarketsRequestSchema: GenMessage<ListMarketsRequest> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 2);

/**
 * List markets response
 *
 * @generated from message bets.v1.ListMarketsResponse
 */
export type ListMarketsResponse = Message<"bets.v1.ListMarketsResponse"> & {
  /**
   * @generated from field: repeated bets.v1.Market markets = 1;
   */
  markets: Market[];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message bets.v1.ListMarketsResponse.
 * Use `create(ListMarketsResponseSchema)` to create a new message.
 */
export const ListMarketsResponseSchema: GenMessage<ListMarketsResponse> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 3);

/**
 * Create market request
 *
 * @generated from message bets.v1.CreateMarketRequest
 */
export type CreateMarketRequest = Message<"bets.v1.CreateMarketRequest"> & {
  /**
   * @generated from field: uint32 fee_bps = 1;
   */
  feeBps: number;

  /**
   * @generated from field: int64 end_ts = 2;
   */
  endTs: bigint;

  /**
   * @generated from field: int64 resolve_deadline_ts = 3;
   */
  resolveDeadlineTs: bigint;

  /**
   * @generated from field: string title = 4;
   */
  title: string;

  /**
   * @generated from field: string creator = 5;
   */
  creator: string;

  /**
   * @generated from field: string mint = 6;
   */
  mint: string;
};

/**
 * Describes the message bets.v1.CreateMarketRequest.
 * Use `create(CreateMarketRequestSchema)` to create a new message.
 */
export const CreateMarketRequestSchema: GenMessage<CreateMarketRequest> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 4);

/**
 * Create market response
 *
 * @generated from message bets.v1.CreateMarketResponse
 */
export type CreateMarketResponse = Message<"bets.v1.CreateMarketResponse"> & {
  /**
   * @generated from field: string market_id = 1;
   */
  marketId: string;

  /**
   * For client signing
   *
   * @generated from field: string unsigned_tx_base64 = 2;
   */
  unsignedTxBase64: string;

  /**
   * For dev/worker mode
   *
   * @generated from field: string signature = 3;
   */
  signature: string;
};

/**
 * Describes the message bets.v1.CreateMarketResponse.
 * Use `create(CreateMarketResponseSchema)` to create a new message.
 */
export const CreateMarketResponseSchema: GenMessage<CreateMarketResponse> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 5);

/**
 * Place bet request
 *
 * @generated from message bets.v1.PlaceBetRequest
 */
export type PlaceBetRequest = Message<"bets.v1.PlaceBetRequest"> & {
  /**
   * @generated from field: string market_id = 1;
   */
  marketId: string;

  /**
   * @generated from field: string owner = 2;
   */
  owner: string;

  /**
   * @generated from field: bets.v1.Side side = 3;
   */
  side: Side;

  /**
   * @generated from field: uint64 amount = 4;
   */
  amount: bigint;
};

/**
 * Describes the message bets.v1.PlaceBetRequest.
 * Use `create(PlaceBetRequestSchema)` to create a new message.
 */
export const PlaceBetRequestSchema: GenMessage<PlaceBetRequest> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 6);

/**
 * Place bet response
 *
 * @generated from message bets.v1.PlaceBetResponse
 */
export type PlaceBetResponse = Message<"bets.v1.PlaceBetResponse"> & {
  /**
   * @generated from field: string position_id = 1;
   */
  positionId: string;

  /**
   * For client signing
   *
   * @generated from field: string unsigned_tx_base64 = 2;
   */
  unsignedTxBase64: string;

  /**
   * For dev/worker mode
   *
   * @generated from field: string signature = 3;
   */
  signature: string;
};

/**
 * Describes the message bets.v1.PlaceBetResponse.
 * Use `create(PlaceBetResponseSchema)` to create a new message.
 */
export const PlaceBetResponseSchema: GenMessage<PlaceBetResponse> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 7);

/**
 * Resolve market request
 *
 * @generated from message bets.v1.ResolveRequest
 */
export type ResolveRequest = Message<"bets.v1.ResolveRequest"> & {
  /**
   * @generated from field: string market_id = 1;
   */
  marketId: string;

  /**
   * @generated from field: string resolver = 2;
   */
  resolver: string;

  /**
   * @generated from field: bets.v1.Side outcome = 3;
   */
  outcome: Side;
};

/**
 * Describes the message bets.v1.ResolveRequest.
 * Use `create(ResolveRequestSchema)` to create a new message.
 */
export const ResolveRequestSchema: GenMessage<ResolveRequest> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 8);

/**
 * Resolve market response
 *
 * @generated from message bets.v1.ResolveResponse
 */
export type ResolveResponse = Message<"bets.v1.ResolveResponse"> & {
  /**
   * For client signing
   *
   * @generated from field: string unsigned_tx_base64 = 1;
   */
  unsignedTxBase64: string;

  /**
   * For dev/worker mode
   *
   * @generated from field: string signature = 2;
   */
  signature: string;
};

/**
 * Describes the message bets.v1.ResolveResponse.
 * Use `create(ResolveResponseSchema)` to create a new message.
 */
export const ResolveResponseSchema: GenMessage<ResolveResponse> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 9);

/**
 * Claim winnings request
 *
 * @generated from message bets.v1.ClaimRequest
 */
export type ClaimRequest = Message<"bets.v1.ClaimRequest"> & {
  /**
   * @generated from field: string market_id = 1;
   */
  marketId: string;

  /**
   * @generated from field: string owner = 2;
   */
  owner: string;
};

/**
 * Describes the message bets.v1.ClaimRequest.
 * Use `create(ClaimRequestSchema)` to create a new message.
 */
export const ClaimRequestSchema: GenMessage<ClaimRequest> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 10);

/**
 * Claim winnings response
 *
 * @generated from message bets.v1.ClaimResponse
 */
export type ClaimResponse = Message<"bets.v1.ClaimResponse"> & {
  /**
   * @generated from field: uint64 payout_amount = 1;
   */
  payoutAmount: bigint;

  /**
   * For client signing
   *
   * @generated from field: string unsigned_tx_base64 = 2;
   */
  unsignedTxBase64: string;

  /**
   * For dev/worker mode
   *
   * @generated from field: string signature = 3;
   */
  signature: string;
};

/**
 * Describes the message bets.v1.ClaimResponse.
 * Use `create(ClaimResponseSchema)` to create a new message.
 */
export const ClaimResponseSchema: GenMessage<ClaimResponse> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 11);

/**
 * Watch events request
 *
 * @generated from message bets.v1.WatchEventsRequest
 */
export type WatchEventsRequest = Message<"bets.v1.WatchEventsRequest"> & {
  /**
   * @generated from field: repeated string market_ids = 1;
   */
  marketIds: string[];
};

/**
 * Describes the message bets.v1.WatchEventsRequest.
 * Use `create(WatchEventsRequestSchema)` to create a new message.
 */
export const WatchEventsRequestSchema: GenMessage<WatchEventsRequest> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 12);

/**
 * Event types
 *
 * @generated from message bets.v1.MarketEvent
 */
export type MarketEvent = Message<"bets.v1.MarketEvent"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string market_id = 2;
   */
  marketId: string;

  /**
   * @generated from field: string event_type = 3;
   */
  eventType: string;

  /**
   * JSON-encoded event data
   *
   * @generated from field: string data = 4;
   */
  data: string;

  /**
   * @generated from field: int64 timestamp = 5;
   */
  timestamp: bigint;

  /**
   * @generated from field: string tx_signature = 6;
   */
  txSignature: string;
};

/**
 * Describes the message bets.v1.MarketEvent.
 * Use `create(MarketEventSchema)` to create a new message.
 */
export const MarketEventSchema: GenMessage<MarketEvent> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 13);

/**
 * Watch events response (server streaming)
 *
 * @generated from message bets.v1.WatchEventsResponse
 */
export type WatchEventsResponse = Message<"bets.v1.WatchEventsResponse"> & {
  /**
   * @generated from field: bets.v1.MarketEvent event = 1;
   */
  event?: MarketEvent;
};

/**
 * Describes the message bets.v1.WatchEventsResponse.
 * Use `create(WatchEventsResponseSchema)` to create a new message.
 */
export const WatchEventsResponseSchema: GenMessage<WatchEventsResponse> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 14);

/**
 * Get single market request
 *
 * @generated from message bets.v1.GetMarketRequest
 */
export type GetMarketRequest = Message<"bets.v1.GetMarketRequest"> & {
  /**
   * @generated from field: string market_id = 1;
   */
  marketId: string;
};

/**
 * Describes the message bets.v1.GetMarketRequest.
 * Use `create(GetMarketRequestSchema)` to create a new message.
 */
export const GetMarketRequestSchema: GenMessage<GetMarketRequest> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 15);

/**
 * Get single market response
 *
 * @generated from message bets.v1.GetMarketResponse
 */
export type GetMarketResponse = Message<"bets.v1.GetMarketResponse"> & {
  /**
   * @generated from field: bets.v1.Market market = 1;
   */
  market?: Market;
};

/**
 * Describes the message bets.v1.GetMarketResponse.
 * Use `create(GetMarketResponseSchema)` to create a new message.
 */
export const GetMarketResponseSchema: GenMessage<GetMarketResponse> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 16);

/**
 * Get position request
 *
 * @generated from message bets.v1.GetPositionRequest
 */
export type GetPositionRequest = Message<"bets.v1.GetPositionRequest"> & {
  /**
   * @generated from field: string market_id = 1;
   */
  marketId: string;

  /**
   * @generated from field: string owner = 2;
   */
  owner: string;
};

/**
 * Describes the message bets.v1.GetPositionRequest.
 * Use `create(GetPositionRequestSchema)` to create a new message.
 */
export const GetPositionRequestSchema: GenMessage<GetPositionRequest> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 17);

/**
 * Get position response
 *
 * @generated from message bets.v1.GetPositionResponse
 */
export type GetPositionResponse = Message<"bets.v1.GetPositionResponse"> & {
  /**
   * @generated from field: bets.v1.Position position = 1;
   */
  position?: Position;
};

/**
 * Describes the message bets.v1.GetPositionResponse.
 * Use `create(GetPositionResponseSchema)` to create a new message.
 */
export const GetPositionResponseSchema: GenMessage<GetPositionResponse> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 18);

/**
 * Get user positions request
 *
 * @generated from message bets.v1.GetUserPositionsRequest
 */
export type GetUserPositionsRequest = Message<"bets.v1.GetUserPositionsRequest"> & {
  /**
   * @generated from field: string owner = 1;
   */
  owner: string;

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize: number;

  /**
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message bets.v1.GetUserPositionsRequest.
 * Use `create(GetUserPositionsRequestSchema)` to create a new message.
 */
export const GetUserPositionsRequestSchema: GenMessage<GetUserPositionsRequest> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 19);

/**
 * Get user positions response
 *
 * @generated from message bets.v1.GetUserPositionsResponse
 */
export type GetUserPositionsResponse = Message<"bets.v1.GetUserPositionsResponse"> & {
  /**
   * @generated from field: repeated bets.v1.Position positions = 1;
   */
  positions: Position[];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message bets.v1.GetUserPositionsResponse.
 * Use `create(GetUserPositionsResponseSchema)` to create a new message.
 */
export const GetUserPositionsResponseSchema: GenMessage<GetUserPositionsResponse> = /*@__PURE__*/
  messageDesc(file_bets_v1_market, 20);

/**
 * BetsService provides betting market functionality
 *
 * @generated from service bets.v1.BetsService
 */
export const BetsService: GenService<{
  /**
   * List available markets
   *
   * @generated from rpc bets.v1.BetsService.ListMarkets
   */
  listMarkets: {
    methodKind: "unary";
    input: typeof ListMarketsRequestSchema;
    output: typeof ListMarketsResponseSchema;
  },
  /**
   * Get a single market by ID
   *
   * @generated from rpc bets.v1.BetsService.GetMarket
   */
  getMarket: {
    methodKind: "unary";
    input: typeof GetMarketRequestSchema;
    output: typeof GetMarketResponseSchema;
  },
  /**
   * Create a new market
   *
   * @generated from rpc bets.v1.BetsService.CreateMarket
   */
  createMarket: {
    methodKind: "unary";
    input: typeof CreateMarketRequestSchema;
    output: typeof CreateMarketResponseSchema;
  },
  /**
   * Place a bet on a market
   *
   * @generated from rpc bets.v1.BetsService.PlaceBet
   */
  placeBet: {
    methodKind: "unary";
    input: typeof PlaceBetRequestSchema;
    output: typeof PlaceBetResponseSchema;
  },
  /**
   * Resolve a market outcome
   *
   * @generated from rpc bets.v1.BetsService.Resolve
   */
  resolve: {
    methodKind: "unary";
    input: typeof ResolveRequestSchema;
    output: typeof ResolveResponseSchema;
  },
  /**
   * Claim winnings from a resolved market
   *
   * @generated from rpc bets.v1.BetsService.Claim
   */
  claim: {
    methodKind: "unary";
    input: typeof ClaimRequestSchema;
    output: typeof ClaimResponseSchema;
  },
  /**
   * Get a user's position in a specific market
   *
   * @generated from rpc bets.v1.BetsService.GetPosition
   */
  getPosition: {
    methodKind: "unary";
    input: typeof GetPositionRequestSchema;
    output: typeof GetPositionResponseSchema;
  },
  /**
   * Get all positions for a user
   *
   * @generated from rpc bets.v1.BetsService.GetUserPositions
   */
  getUserPositions: {
    methodKind: "unary";
    input: typeof GetUserPositionsRequestSchema;
    output: typeof GetUserPositionsResponseSchema;
  },
  /**
   * Watch market events (server streaming)
   *
   * @generated from rpc bets.v1.BetsService.WatchEvents
   */
  watchEvents: {
    methodKind: "server_streaming";
    input: typeof WatchEventsRequestSchema;
    output: typeof WatchEventsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_bets_v1_market, 0);

