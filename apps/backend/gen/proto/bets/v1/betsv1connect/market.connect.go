// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bets/v1/market.proto

package betsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/friend-bets/backend/gen/proto/bets/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BetsServiceName is the fully-qualified name of the BetsService service.
	BetsServiceName = "bets.v1.BetsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BetsServiceListMarketsProcedure is the fully-qualified name of the BetsService's ListMarkets RPC.
	BetsServiceListMarketsProcedure = "/bets.v1.BetsService/ListMarkets"
	// BetsServiceGetMarketProcedure is the fully-qualified name of the BetsService's GetMarket RPC.
	BetsServiceGetMarketProcedure = "/bets.v1.BetsService/GetMarket"
	// BetsServiceCreateMarketProcedure is the fully-qualified name of the BetsService's CreateMarket
	// RPC.
	BetsServiceCreateMarketProcedure = "/bets.v1.BetsService/CreateMarket"
	// BetsServicePlaceBetProcedure is the fully-qualified name of the BetsService's PlaceBet RPC.
	BetsServicePlaceBetProcedure = "/bets.v1.BetsService/PlaceBet"
	// BetsServiceResolveProcedure is the fully-qualified name of the BetsService's Resolve RPC.
	BetsServiceResolveProcedure = "/bets.v1.BetsService/Resolve"
	// BetsServiceClaimProcedure is the fully-qualified name of the BetsService's Claim RPC.
	BetsServiceClaimProcedure = "/bets.v1.BetsService/Claim"
	// BetsServiceGetPositionProcedure is the fully-qualified name of the BetsService's GetPosition RPC.
	BetsServiceGetPositionProcedure = "/bets.v1.BetsService/GetPosition"
	// BetsServiceGetUserPositionsProcedure is the fully-qualified name of the BetsService's
	// GetUserPositions RPC.
	BetsServiceGetUserPositionsProcedure = "/bets.v1.BetsService/GetUserPositions"
	// BetsServiceWatchEventsProcedure is the fully-qualified name of the BetsService's WatchEvents RPC.
	BetsServiceWatchEventsProcedure = "/bets.v1.BetsService/WatchEvents"
)

// BetsServiceClient is a client for the bets.v1.BetsService service.
type BetsServiceClient interface {
	// List available markets
	ListMarkets(context.Context, *connect.Request[v1.ListMarketsRequest]) (*connect.Response[v1.ListMarketsResponse], error)
	// Get a single market by ID
	GetMarket(context.Context, *connect.Request[v1.GetMarketRequest]) (*connect.Response[v1.GetMarketResponse], error)
	// Create a new market
	CreateMarket(context.Context, *connect.Request[v1.CreateMarketRequest]) (*connect.Response[v1.CreateMarketResponse], error)
	// Place a bet on a market
	PlaceBet(context.Context, *connect.Request[v1.PlaceBetRequest]) (*connect.Response[v1.PlaceBetResponse], error)
	// Resolve a market outcome
	Resolve(context.Context, *connect.Request[v1.ResolveRequest]) (*connect.Response[v1.ResolveResponse], error)
	// Claim winnings from a resolved market
	Claim(context.Context, *connect.Request[v1.ClaimRequest]) (*connect.Response[v1.ClaimResponse], error)
	// Get a user's position in a specific market
	GetPosition(context.Context, *connect.Request[v1.GetPositionRequest]) (*connect.Response[v1.GetPositionResponse], error)
	// Get all positions for a user
	GetUserPositions(context.Context, *connect.Request[v1.GetUserPositionsRequest]) (*connect.Response[v1.GetUserPositionsResponse], error)
	// Watch market events (server streaming)
	WatchEvents(context.Context, *connect.Request[v1.WatchEventsRequest]) (*connect.ServerStreamForClient[v1.WatchEventsResponse], error)
}

// NewBetsServiceClient constructs a client for the bets.v1.BetsService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBetsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BetsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	betsServiceMethods := v1.File_bets_v1_market_proto.Services().ByName("BetsService").Methods()
	return &betsServiceClient{
		listMarkets: connect.NewClient[v1.ListMarketsRequest, v1.ListMarketsResponse](
			httpClient,
			baseURL+BetsServiceListMarketsProcedure,
			connect.WithSchema(betsServiceMethods.ByName("ListMarkets")),
			connect.WithClientOptions(opts...),
		),
		getMarket: connect.NewClient[v1.GetMarketRequest, v1.GetMarketResponse](
			httpClient,
			baseURL+BetsServiceGetMarketProcedure,
			connect.WithSchema(betsServiceMethods.ByName("GetMarket")),
			connect.WithClientOptions(opts...),
		),
		createMarket: connect.NewClient[v1.CreateMarketRequest, v1.CreateMarketResponse](
			httpClient,
			baseURL+BetsServiceCreateMarketProcedure,
			connect.WithSchema(betsServiceMethods.ByName("CreateMarket")),
			connect.WithClientOptions(opts...),
		),
		placeBet: connect.NewClient[v1.PlaceBetRequest, v1.PlaceBetResponse](
			httpClient,
			baseURL+BetsServicePlaceBetProcedure,
			connect.WithSchema(betsServiceMethods.ByName("PlaceBet")),
			connect.WithClientOptions(opts...),
		),
		resolve: connect.NewClient[v1.ResolveRequest, v1.ResolveResponse](
			httpClient,
			baseURL+BetsServiceResolveProcedure,
			connect.WithSchema(betsServiceMethods.ByName("Resolve")),
			connect.WithClientOptions(opts...),
		),
		claim: connect.NewClient[v1.ClaimRequest, v1.ClaimResponse](
			httpClient,
			baseURL+BetsServiceClaimProcedure,
			connect.WithSchema(betsServiceMethods.ByName("Claim")),
			connect.WithClientOptions(opts...),
		),
		getPosition: connect.NewClient[v1.GetPositionRequest, v1.GetPositionResponse](
			httpClient,
			baseURL+BetsServiceGetPositionProcedure,
			connect.WithSchema(betsServiceMethods.ByName("GetPosition")),
			connect.WithClientOptions(opts...),
		),
		getUserPositions: connect.NewClient[v1.GetUserPositionsRequest, v1.GetUserPositionsResponse](
			httpClient,
			baseURL+BetsServiceGetUserPositionsProcedure,
			connect.WithSchema(betsServiceMethods.ByName("GetUserPositions")),
			connect.WithClientOptions(opts...),
		),
		watchEvents: connect.NewClient[v1.WatchEventsRequest, v1.WatchEventsResponse](
			httpClient,
			baseURL+BetsServiceWatchEventsProcedure,
			connect.WithSchema(betsServiceMethods.ByName("WatchEvents")),
			connect.WithClientOptions(opts...),
		),
	}
}

// betsServiceClient implements BetsServiceClient.
type betsServiceClient struct {
	listMarkets      *connect.Client[v1.ListMarketsRequest, v1.ListMarketsResponse]
	getMarket        *connect.Client[v1.GetMarketRequest, v1.GetMarketResponse]
	createMarket     *connect.Client[v1.CreateMarketRequest, v1.CreateMarketResponse]
	placeBet         *connect.Client[v1.PlaceBetRequest, v1.PlaceBetResponse]
	resolve          *connect.Client[v1.ResolveRequest, v1.ResolveResponse]
	claim            *connect.Client[v1.ClaimRequest, v1.ClaimResponse]
	getPosition      *connect.Client[v1.GetPositionRequest, v1.GetPositionResponse]
	getUserPositions *connect.Client[v1.GetUserPositionsRequest, v1.GetUserPositionsResponse]
	watchEvents      *connect.Client[v1.WatchEventsRequest, v1.WatchEventsResponse]
}

// ListMarkets calls bets.v1.BetsService.ListMarkets.
func (c *betsServiceClient) ListMarkets(ctx context.Context, req *connect.Request[v1.ListMarketsRequest]) (*connect.Response[v1.ListMarketsResponse], error) {
	return c.listMarkets.CallUnary(ctx, req)
}

// GetMarket calls bets.v1.BetsService.GetMarket.
func (c *betsServiceClient) GetMarket(ctx context.Context, req *connect.Request[v1.GetMarketRequest]) (*connect.Response[v1.GetMarketResponse], error) {
	return c.getMarket.CallUnary(ctx, req)
}

// CreateMarket calls bets.v1.BetsService.CreateMarket.
func (c *betsServiceClient) CreateMarket(ctx context.Context, req *connect.Request[v1.CreateMarketRequest]) (*connect.Response[v1.CreateMarketResponse], error) {
	return c.createMarket.CallUnary(ctx, req)
}

// PlaceBet calls bets.v1.BetsService.PlaceBet.
func (c *betsServiceClient) PlaceBet(ctx context.Context, req *connect.Request[v1.PlaceBetRequest]) (*connect.Response[v1.PlaceBetResponse], error) {
	return c.placeBet.CallUnary(ctx, req)
}

// Resolve calls bets.v1.BetsService.Resolve.
func (c *betsServiceClient) Resolve(ctx context.Context, req *connect.Request[v1.ResolveRequest]) (*connect.Response[v1.ResolveResponse], error) {
	return c.resolve.CallUnary(ctx, req)
}

// Claim calls bets.v1.BetsService.Claim.
func (c *betsServiceClient) Claim(ctx context.Context, req *connect.Request[v1.ClaimRequest]) (*connect.Response[v1.ClaimResponse], error) {
	return c.claim.CallUnary(ctx, req)
}

// GetPosition calls bets.v1.BetsService.GetPosition.
func (c *betsServiceClient) GetPosition(ctx context.Context, req *connect.Request[v1.GetPositionRequest]) (*connect.Response[v1.GetPositionResponse], error) {
	return c.getPosition.CallUnary(ctx, req)
}

// GetUserPositions calls bets.v1.BetsService.GetUserPositions.
func (c *betsServiceClient) GetUserPositions(ctx context.Context, req *connect.Request[v1.GetUserPositionsRequest]) (*connect.Response[v1.GetUserPositionsResponse], error) {
	return c.getUserPositions.CallUnary(ctx, req)
}

// WatchEvents calls bets.v1.BetsService.WatchEvents.
func (c *betsServiceClient) WatchEvents(ctx context.Context, req *connect.Request[v1.WatchEventsRequest]) (*connect.ServerStreamForClient[v1.WatchEventsResponse], error) {
	return c.watchEvents.CallServerStream(ctx, req)
}

// BetsServiceHandler is an implementation of the bets.v1.BetsService service.
type BetsServiceHandler interface {
	// List available markets
	ListMarkets(context.Context, *connect.Request[v1.ListMarketsRequest]) (*connect.Response[v1.ListMarketsResponse], error)
	// Get a single market by ID
	GetMarket(context.Context, *connect.Request[v1.GetMarketRequest]) (*connect.Response[v1.GetMarketResponse], error)
	// Create a new market
	CreateMarket(context.Context, *connect.Request[v1.CreateMarketRequest]) (*connect.Response[v1.CreateMarketResponse], error)
	// Place a bet on a market
	PlaceBet(context.Context, *connect.Request[v1.PlaceBetRequest]) (*connect.Response[v1.PlaceBetResponse], error)
	// Resolve a market outcome
	Resolve(context.Context, *connect.Request[v1.ResolveRequest]) (*connect.Response[v1.ResolveResponse], error)
	// Claim winnings from a resolved market
	Claim(context.Context, *connect.Request[v1.ClaimRequest]) (*connect.Response[v1.ClaimResponse], error)
	// Get a user's position in a specific market
	GetPosition(context.Context, *connect.Request[v1.GetPositionRequest]) (*connect.Response[v1.GetPositionResponse], error)
	// Get all positions for a user
	GetUserPositions(context.Context, *connect.Request[v1.GetUserPositionsRequest]) (*connect.Response[v1.GetUserPositionsResponse], error)
	// Watch market events (server streaming)
	WatchEvents(context.Context, *connect.Request[v1.WatchEventsRequest], *connect.ServerStream[v1.WatchEventsResponse]) error
}

// NewBetsServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBetsServiceHandler(svc BetsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	betsServiceMethods := v1.File_bets_v1_market_proto.Services().ByName("BetsService").Methods()
	betsServiceListMarketsHandler := connect.NewUnaryHandler(
		BetsServiceListMarketsProcedure,
		svc.ListMarkets,
		connect.WithSchema(betsServiceMethods.ByName("ListMarkets")),
		connect.WithHandlerOptions(opts...),
	)
	betsServiceGetMarketHandler := connect.NewUnaryHandler(
		BetsServiceGetMarketProcedure,
		svc.GetMarket,
		connect.WithSchema(betsServiceMethods.ByName("GetMarket")),
		connect.WithHandlerOptions(opts...),
	)
	betsServiceCreateMarketHandler := connect.NewUnaryHandler(
		BetsServiceCreateMarketProcedure,
		svc.CreateMarket,
		connect.WithSchema(betsServiceMethods.ByName("CreateMarket")),
		connect.WithHandlerOptions(opts...),
	)
	betsServicePlaceBetHandler := connect.NewUnaryHandler(
		BetsServicePlaceBetProcedure,
		svc.PlaceBet,
		connect.WithSchema(betsServiceMethods.ByName("PlaceBet")),
		connect.WithHandlerOptions(opts...),
	)
	betsServiceResolveHandler := connect.NewUnaryHandler(
		BetsServiceResolveProcedure,
		svc.Resolve,
		connect.WithSchema(betsServiceMethods.ByName("Resolve")),
		connect.WithHandlerOptions(opts...),
	)
	betsServiceClaimHandler := connect.NewUnaryHandler(
		BetsServiceClaimProcedure,
		svc.Claim,
		connect.WithSchema(betsServiceMethods.ByName("Claim")),
		connect.WithHandlerOptions(opts...),
	)
	betsServiceGetPositionHandler := connect.NewUnaryHandler(
		BetsServiceGetPositionProcedure,
		svc.GetPosition,
		connect.WithSchema(betsServiceMethods.ByName("GetPosition")),
		connect.WithHandlerOptions(opts...),
	)
	betsServiceGetUserPositionsHandler := connect.NewUnaryHandler(
		BetsServiceGetUserPositionsProcedure,
		svc.GetUserPositions,
		connect.WithSchema(betsServiceMethods.ByName("GetUserPositions")),
		connect.WithHandlerOptions(opts...),
	)
	betsServiceWatchEventsHandler := connect.NewServerStreamHandler(
		BetsServiceWatchEventsProcedure,
		svc.WatchEvents,
		connect.WithSchema(betsServiceMethods.ByName("WatchEvents")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bets.v1.BetsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BetsServiceListMarketsProcedure:
			betsServiceListMarketsHandler.ServeHTTP(w, r)
		case BetsServiceGetMarketProcedure:
			betsServiceGetMarketHandler.ServeHTTP(w, r)
		case BetsServiceCreateMarketProcedure:
			betsServiceCreateMarketHandler.ServeHTTP(w, r)
		case BetsServicePlaceBetProcedure:
			betsServicePlaceBetHandler.ServeHTTP(w, r)
		case BetsServiceResolveProcedure:
			betsServiceResolveHandler.ServeHTTP(w, r)
		case BetsServiceClaimProcedure:
			betsServiceClaimHandler.ServeHTTP(w, r)
		case BetsServiceGetPositionProcedure:
			betsServiceGetPositionHandler.ServeHTTP(w, r)
		case BetsServiceGetUserPositionsProcedure:
			betsServiceGetUserPositionsHandler.ServeHTTP(w, r)
		case BetsServiceWatchEventsProcedure:
			betsServiceWatchEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBetsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBetsServiceHandler struct{}

func (UnimplementedBetsServiceHandler) ListMarkets(context.Context, *connect.Request[v1.ListMarketsRequest]) (*connect.Response[v1.ListMarketsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bets.v1.BetsService.ListMarkets is not implemented"))
}

func (UnimplementedBetsServiceHandler) GetMarket(context.Context, *connect.Request[v1.GetMarketRequest]) (*connect.Response[v1.GetMarketResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bets.v1.BetsService.GetMarket is not implemented"))
}

func (UnimplementedBetsServiceHandler) CreateMarket(context.Context, *connect.Request[v1.CreateMarketRequest]) (*connect.Response[v1.CreateMarketResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bets.v1.BetsService.CreateMarket is not implemented"))
}

func (UnimplementedBetsServiceHandler) PlaceBet(context.Context, *connect.Request[v1.PlaceBetRequest]) (*connect.Response[v1.PlaceBetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bets.v1.BetsService.PlaceBet is not implemented"))
}

func (UnimplementedBetsServiceHandler) Resolve(context.Context, *connect.Request[v1.ResolveRequest]) (*connect.Response[v1.ResolveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bets.v1.BetsService.Resolve is not implemented"))
}

func (UnimplementedBetsServiceHandler) Claim(context.Context, *connect.Request[v1.ClaimRequest]) (*connect.Response[v1.ClaimResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bets.v1.BetsService.Claim is not implemented"))
}

func (UnimplementedBetsServiceHandler) GetPosition(context.Context, *connect.Request[v1.GetPositionRequest]) (*connect.Response[v1.GetPositionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bets.v1.BetsService.GetPosition is not implemented"))
}

func (UnimplementedBetsServiceHandler) GetUserPositions(context.Context, *connect.Request[v1.GetUserPositionsRequest]) (*connect.Response[v1.GetUserPositionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bets.v1.BetsService.GetUserPositions is not implemented"))
}

func (UnimplementedBetsServiceHandler) WatchEvents(context.Context, *connect.Request[v1.WatchEventsRequest], *connect.ServerStream[v1.WatchEventsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("bets.v1.BetsService.WatchEvents is not implemented"))
}
